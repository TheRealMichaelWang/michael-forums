// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Brief Description of the models
//User: Represents a user in the system; users can create posts and replies.
//Forum: Represents a forum where users can create posts. Forums are organized by topics.
//Post: Represents a post created by a user in a single forum; each post can have multiple replies.
//Reply: Represents a reply to a post; each reply is associated with a specific post and user.

model User {
  id        Int     @id @default(autoincrement())
  username  String  @unique
  email     String  @unique

  posts     Post[]
  replies   Reply[]
}

model Forum {
  id        Int     @id @default(autoincrement())
  title     String  @unique
  about     String

  posts     Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?

  replies   Reply[]

  authorId  Int
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)

  forumId   Int
  forum     Forum   @relation(fields: [forumId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Reply {
  id        Int     @id @default(autoincrement())
  content   String
  
  authorId  Int
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId    Int
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
}